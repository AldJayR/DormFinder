# Generated by Django 5.1.4 on 2025-01-24 14:33

import core.models.user
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import encrypted_model_fields.fields
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Amenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Common PH dorm amenities (e.g., WiFi, Laundry Area)', max_length=100, unique=True)),
                ('icon', models.CharField(blank=True, help_text="FontAwesome icon class (e.g., 'fa-wifi')", max_length=50)),
            ],
            options={
                'verbose_name_plural': 'Amenities',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Dorm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('address', models.TextField()),
                ('monthly_rate', models.DecimalField(decimal_places=2, help_text='Monthly rent in PHP', max_digits=10)),
                ('distance_from_school', models.CharField(default='5-minute walk', help_text='Walking distance from NEUST campus', max_length=50)),
                ('rules', models.TextField(blank=True, help_text='Curfew time, visitor policies, etc.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('amenities', models.ManyToManyField(blank=True, related_name='dorms', to='core.amenity')),
            ],
            options={
                'verbose_name': 'Dormitory',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('move_in_date', models.DateField(help_text='Follows PH academic calendar')),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('confirmed', 'Confirmed'), ('canceled', 'Canceled')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('dorm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='core.dorm')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('method', models.CharField(choices=[('cash', 'Cash'), ('gcash', 'GCash'), ('bank_transfer', 'Bank Transfer')], default='cash', max_length=20)),
                ('reference_number', models.CharField(blank=True, help_text='GCash transaction ID or bank reference', max_length=100)),
                ('is_verified', models.BooleanField(default=False, help_text='Manually verified by admin for cash payments')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('booking', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment', to='core.booking')),
            ],
            options={
                'verbose_name': 'Payment Record',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the user', primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('student', 'Student'), ('dorm_owner', 'Dorm Owner'), ('admin', 'Admin')], default='student', help_text='User role in the system', max_length=20)),
                ('phone', encrypted_model_fields.fields.EncryptedCharField(help_text='PH mobile number (+639XXXXXXXXX)', unique=True, validators=[core.models.user.validate_ph_phone])),
                ('school_id_number', encrypted_model_fields.fields.EncryptedCharField(blank=True, help_text='NEUST student ID (e.g., NEUST-2023-12345)', null=True, unique=True, validators=[core.models.user.validate_neust_id])),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether the user has been verified by admin (for dorm owners).')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='core_user_groups', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='core_user_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(help_text='1 (Poor) to 5 (Excellent)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(blank=True, help_text='Optional detailed feedback')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('dorm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='core.dorm')),
                ('user', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='core.user')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='dorm',
            name='owner',
            field=models.ForeignKey(limit_choices_to={'role': 'dorm_owner'}, on_delete=django.db.models.deletion.CASCADE, related_name='dorms', to='core.user'),
        ),
        migrations.AddField(
            model_name='booking',
            name='user',
            field=models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='core.user'),
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(fields=('phone',), name='unique_ph_phone'),
        ),
        migrations.AddConstraint(
            model_name='review',
            constraint=models.UniqueConstraint(fields=('user', 'dorm'), name='one_review_per_user_per_dorm'),
        ),
        migrations.AddIndex(
            model_name='dorm',
            index=models.Index(fields=['monthly_rate'], name='core_dorm_monthly_096300_idx'),
        ),
        migrations.AddIndex(
            model_name='dorm',
            index=models.Index(fields=['created_at'], name='core_dorm_created_d67165_idx'),
        ),
    ]
